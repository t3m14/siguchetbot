import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from aiogram_calendar import simple_cal_callback, SimpleCalendar, dialog_cal_callback, DialogCalendar

API_TOKEN = ''

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

start_kb = ReplyKeyboardMarkup(resize_keyboard=True,)
start_kb.row('–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å', '–î–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å').row("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞")


# starting bot when user sends `/start` command, answering with inline calendar
@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç üñê\n\n –≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç–∞–±–∞–∫–∞ üö¨\n\n –ë–æ—Ç –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –º—ã –æ—á–µ–Ω—å –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—Å–∫–æ—Ä–µ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤–∞—à—É –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É üê±‚Äç\n\n –¶–µ–ª—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —á–∞—Å—Ç–æ –æ–Ω —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç —Ç–∞–±–∞–∫, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ –±—ã –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫—É—Ä–µ–Ω–∏–µ. \n\n–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å–µ–≥–¥–∞ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∞. üê±‚Äçüë§', reply_markup=start_kb)


@dp.message_handler(Text(equals=['–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'], ignore_case=True))
async def nav_cal_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É: ", reply_markup=await SimpleCalendar().start_calendar())


# simple calendar usage
@dp.callback_query_handler(simple_cal_callback.filter())
async def process_simple_calendar(callback_query: CallbackQuery, callback_data: dict):
    selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {date.strftime("%d/%m/%Y")}',
            reply_markup=start_kb
        )


@dp.message_handler(Text(equals=['–î–∏–∞–ª–æ–≥–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'], ignore_case=True))
async def simple_cal_handler(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É: ", reply_markup=await DialogCalendar().start_calendar())


# dialog calendar usage
@dp.callback_query_handler(dialog_cal_callback.filter())
async def process_dialog_calendar(callback_query: CallbackQuery, callback_data: dict):
    selected, date = await DialogCalendar().process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.answer(
            f'You selected {date.strftime("%d/%m/%Y")}',
            reply_markup=start_kb
        )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)   
